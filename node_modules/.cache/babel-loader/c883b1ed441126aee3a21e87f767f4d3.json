{"ast":null,"code":"var _jsxFileName = \"/Users/ayushgarg/VSCodeProjects/COVID-Risk-Web-App/src/components/CustomSlider.js\";\nimport React from 'react';\nimport './CustomSlider.css';\n/*\n    To use slider as a custom HTML tag in any other component:\n\n    ex:     import CustomSlider from './CustomSlider';\n            <CustomSlider min='0' max='100' step_count='0.5'/>\n\n    min = minimum allowable value\n    max = maximum allowable value\n    step_count = step size of the sliders (interval between each increment)\n\n    To change styling:\n    -you can change any colors to whatever\n    -you can change 'width' and 'max-width' in lines 3-4 to change the width of the slider to whatever (make sure width is a percentage)\n    -plz try not to change anything else unless u understand what its doing cause a lot of scaling is hard-coded\n     and it was frickin annoying to set the correct values thnx... :)\n*/\n\nclass CustomSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props);\n    this.state = {\n      lvalue: parseFloat(this.props.defaultLeft),\n      //this value holds the MIN input value (to be used for back-end)\n      rvalue: parseFloat(this.props.defaultRight),\n      //this value holds the MAX input value\n      _step: parseFloat(this.props.step_count)\n    };\n    this.leftInputUpdated = this.leftInputUpdated.bind(this);\n    this.rightInputUpdated = this.rightInputUpdated.bind(this);\n  }\n\n  leftInputUpdated(event) {\n    var targetValue = event.target.value;\n    targetValue = Math.min(targetValue, this.state.rvalue - this.state._step);\n    this.setState({\n      lvalue: targetValue\n    });\n  }\n\n  rightInputUpdated(event) {\n    var targetValue = event.target.value;\n    targetValue = Math.max(targetValue, this.state.lvalue + this.state._step);\n    this.setState({\n      rvalue: targetValue\n    }); // this.props.defaultRight = \"\"+this.state.rvalue;\n    // console.log(this.state.rvalue);\n    // console.log(this.props.defaultRight);\n  }\n\n  calcPercent(targetValue) {\n    return (targetValue - this.props.min) / (this.props.max - this.props.min) * 100;\n  }\n\n  roundValue(targetValue) {\n    return Math.round(targetValue * 1000) / 1000;\n  }\n\n  render() {\n    const rangeStyle = {\n      left: this.calcPercent(this.state.lvalue) + '%',\n      right: 100 - this.calcPercent(this.state.rvalue) + '%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"frame\",\n      className: this.props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: this.props.className,\n      type: \"range\",\n      min: this.props.min,\n      max: this.props.max,\n      step: this.props.step_count,\n      value: this.state.lvalue,\n      onInput: this.leftInputUpdated,\n      onChange: this.props.changeLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: this.props.className,\n      type: \"range\",\n      min: this.props.min,\n      max: this.props.max,\n      step: this.props.step_count,\n      value: this.state.rvalue,\n      onInput: this.rightInputUpdated,\n      onChange: this.props.changeRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"track\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"range\",\n      style: rangeStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"thumb left\",\n      style: {\n        left: this.calcPercent(this.state.lvalue) + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"thumb right\",\n      style: {\n        right: 100 - this.calcPercent(this.state.rvalue) + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info left\",\n      style: {\n        left: this.calcPercent(this.state.lvalue) + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, this.roundValue(this.state.lvalue)), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info right\",\n      style: {\n        right: 100 - this.calcPercent(this.state.rvalue) + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, this.roundValue(this.state.rvalue))));\n  }\n\n}\n\nexport default CustomSlider;","map":{"version":3,"sources":["/Users/ayushgarg/VSCodeProjects/COVID-Risk-Web-App/src/components/CustomSlider.js"],"names":["React","CustomSlider","Component","constructor","props","console","log","state","lvalue","parseFloat","defaultLeft","rvalue","defaultRight","_step","step_count","leftInputUpdated","bind","rightInputUpdated","event","targetValue","target","value","Math","min","setState","max","calcPercent","roundValue","round","render","rangeStyle","left","right","className","changeLeft","changeRight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CustomSlider.css';\n\n/*\n    To use slider as a custom HTML tag in any other component:\n\n    ex:     import CustomSlider from './CustomSlider';\n            <CustomSlider min='0' max='100' step_count='0.5'/>\n\n    min = minimum allowable value\n    max = maximum allowable value\n    step_count = step size of the sliders (interval between each increment)\n\n    To change styling:\n    -you can change any colors to whatever\n    -you can change 'width' and 'max-width' in lines 3-4 to change the width of the slider to whatever (make sure width is a percentage)\n    -plz try not to change anything else unless u understand what its doing cause a lot of scaling is hard-coded\n     and it was frickin annoying to set the correct values thnx... :)\n*/\n\nclass CustomSlider extends React.Component{\n    constructor(props){\n        super(props);\n        console.log(props)\n        this.state = {\n            lvalue: parseFloat(this.props.defaultLeft), //this value holds the MIN input value (to be used for back-end)\n            rvalue: parseFloat(this.props.defaultRight), //this value holds the MAX input value\n            _step: parseFloat(this.props.step_count),\n        }\n\n        this.leftInputUpdated = this.leftInputUpdated.bind(this);\n        this.rightInputUpdated = this.rightInputUpdated.bind(this);\n    }\n\n    leftInputUpdated(event){\n        var targetValue = event.target.value;\n        targetValue = Math.min(targetValue, this.state.rvalue - this.state._step);\n\n        this.setState({ lvalue: targetValue });\n    }\n    rightInputUpdated(event){\n        var targetValue = event.target.value;\n        targetValue = Math.max(targetValue, this.state.lvalue + this.state._step);\n\n        this.setState({ rvalue: targetValue });\n        // this.props.defaultRight = \"\"+this.state.rvalue;\n        // console.log(this.state.rvalue);\n        // console.log(this.props.defaultRight);\n    }\n\n    calcPercent(targetValue){\n        return ((targetValue - this.props.min) / (this.props.max - this.props.min)) * 100;\n    }\n\n    roundValue(targetValue){\n        return Math.round(targetValue * 1000) / 1000;\n    }\n\n    render(){\n        const rangeStyle = {\n            left: this.calcPercent(this.state.lvalue) + '%',\n            right: (100 - this.calcPercent(this.state.rvalue)) + '%'\n        };\n\n        return(\n            <div id=\"frame\" className={this.props.className}>\n                <input\n                    className={this.props.className}\n                    type='range'\n                    min={this.props.min}\n                    max={this.props.max}\n                    step={this.props.step_count}\n                    value={this.state.lvalue}\n                    onInput={this.leftInputUpdated}\n                    onChange={this.props.changeLeft}/>\n                <input\n                    className={this.props.className}\n                    type='range'\n                    min={this.props.min}\n                    max={this.props.max}\n                    step={this.props.step_count}\n                    value={this.state.rvalue}\n                    onInput={this.rightInputUpdated}\n                    onChange={this.props.changeRight}/>\n                <div className='bar'>\n                    <div className='track'/>\n                    <div className='range'\n                        style={rangeStyle}/>\n                    <div className='thumb left'\n                        style={{left: this.calcPercent(this.state.lvalue) + '%'}}/>\n                    <div className='thumb right'\n                        style={{right: (100 - this.calcPercent(this.state.rvalue)) + '%'}}/>\n                    <p className='info left'\n                        style={{left: this.calcPercent(this.state.lvalue) + '%'}}>{this.roundValue(this.state.lvalue)}</p>\n                    <p className='info right'\n                        style={{right: (100 - this.calcPercent(this.state.rvalue)) + '%'}}>{this.roundValue(this.state.rvalue)}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CustomSlider;\n"]},"metadata":{},"sourceType":"module"}