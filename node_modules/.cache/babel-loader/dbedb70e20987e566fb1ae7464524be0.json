{"ast":null,"code":"var _jsxFileName = \"/Users/ayushgarg/VSCodeProjects/COVID-Risk-Web-App/src/components/CustomSlider.js\";\nimport React from 'react';\nimport './CustomSlider.css';\n/*\n    To use slider as a custom HTML tag in any other component:\n\n    ex:     import CustomSlider from './CustomSlider';\n            <CustomSlider min='0' max='100' step_count='0.5'/>\n\n    min = minimum allowable value\n    max = maximum allowable value\n    step_count = step size of the sliders (interval between each increment)\n\n    To change styling:\n    -you can change any colors to whatever\n    -you can change 'width' and 'max-width' in lines 3-4 to change the width of the slider to whatever (make sure width is a percentage)\n    -plz try not to change anything else unless u understand what its doing cause a lot of scaling is hard-coded\n     and it was frickin annoying to set the correct values thnx... :)\n*/\n\nclass CustomSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lvalue: parseInt(this.props.min),\n      //this value holds the MIN input value (to be used for back-end)\n      rvalue: parseInt(this.props.max),\n      //this value holds the MAX input value\n      _step: parseFloat(this.props.step_count)\n    };\n    this.leftInputUpdated = this.leftInputUpdated.bind(this);\n    this.rightInputUpdated = this.rightInputUpdated.bind(this);\n  }\n\n  leftInputUpdated(event) {\n    var targetValue1 = event.target.value;\n    targetValue1 = Math.min(targetValue1, this.state.rvalue - this.state._step);\n    var percent = (targetValue1 - this.props.min) / (this.props.max - this.props.min) * 100;\n    this.setState({\n      lvalue: Math.round(percent * 100) / 100\n    });\n  }\n\n  rightInputUpdated(event) {\n    var targetValue = event.target.value;\n    targetValue = Math.max(targetValue, this.state.lvalue + this.state._step);\n    var percent = (targetValue - this.props.min) / (this.props.max - this.props.min) * 100;\n    this.setState({\n      rvalue: Math.round(percent * 100) / 100\n    });\n  }\n\n  render() {\n    const rangeStyle = {\n      left: this.state.lvalue + '%',\n      right: 100 - this.state.rvalue + '%'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"frame\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-left\",\n      type: \"range\",\n      min: this.props.min,\n      max: this.props.max,\n      step: this.props.step_count,\n      value: this.state.lvalue,\n      onInput: this.leftInputUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input-right\",\n      type: \"range\",\n      min: this.props.min,\n      max: this.props.max,\n      step: this.props.step_count,\n      value: this.state.rvalue,\n      onInput: this.rightInputUpdated,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bar\",\n      style: {\n        backgroundColor: this.state.bgcolor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"track\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"range\",\n      style: rangeStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"thumb left\",\n      style: {\n        left: this.state.lvalue + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"thumb right\",\n      style: {\n        right: 100 - this.state.rvalue + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info left\",\n      style: {\n        left: this.state.lvalue + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, this.state.lvalue), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"info right\",\n      style: {\n        right: 100 - this.state.rvalue + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, this.state.rvalue)));\n  }\n\n}\n\nexport default CustomSlider;","map":{"version":3,"sources":["/Users/ayushgarg/VSCodeProjects/COVID-Risk-Web-App/src/components/CustomSlider.js"],"names":["React","CustomSlider","Component","constructor","props","state","lvalue","parseInt","min","rvalue","max","_step","parseFloat","step_count","leftInputUpdated","bind","rightInputUpdated","event","targetValue1","target","value","Math","percent","setState","round","targetValue","render","rangeStyle","left","right","backgroundColor","bgcolor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CustomSlider.css';\n\n/*\n    To use slider as a custom HTML tag in any other component:\n\n    ex:     import CustomSlider from './CustomSlider';\n            <CustomSlider min='0' max='100' step_count='0.5'/>\n\n    min = minimum allowable value\n    max = maximum allowable value\n    step_count = step size of the sliders (interval between each increment)\n\n    To change styling:\n    -you can change any colors to whatever\n    -you can change 'width' and 'max-width' in lines 3-4 to change the width of the slider to whatever (make sure width is a percentage)\n    -plz try not to change anything else unless u understand what its doing cause a lot of scaling is hard-coded\n     and it was frickin annoying to set the correct values thnx... :)\n*/\n\nclass CustomSlider extends React.Component{\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            lvalue: parseInt(this.props.min), //this value holds the MIN input value (to be used for back-end)\n            rvalue: parseInt(this.props.max), //this value holds the MAX input value\n            _step: parseFloat(this.props.step_count)\n        }\n\n        this.leftInputUpdated = this.leftInputUpdated.bind(this);\n        this.rightInputUpdated = this.rightInputUpdated.bind(this);\n    }\n\n    leftInputUpdated(event){\n        var targetValue1 = event.target.value;\n        targetValue1 = Math.min(targetValue1, this.state.rvalue - this.state._step);\n        var percent = ((targetValue1 - this.props.min) / (this.props.max - this.props.min)) * 100;\n\n        this.setState({ lvalue: Math.round(percent * 100) / 100 });\n    }\n    rightInputUpdated(event){\n        var targetValue = event.target.value;\n        targetValue = Math.max(targetValue, this.state.lvalue + this.state._step);\n        var percent = ((targetValue - this.props.min) / (this.props.max - this.props.min)) * 100;\n\n        this.setState({ rvalue: Math.round(percent * 100) / 100 });\n    }\n    \n    render(){\n        const rangeStyle = {\n            left: this.state.lvalue + '%',\n            right: (100 - this.state.rvalue) + '%' \n        };\n\n        return(\n            <div className=\"frame\">\n                <input\n                    className='input-left'\n                    type='range'\n                    min={this.props.min}\n                    max={this.props.max}\n                    step={this.props.step_count}\n                    value={this.state.lvalue}\n                    onInput={this.leftInputUpdated}/>\n                <input\n                    className='input-right'\n                    type='range'\n                    min={this.props.min}\n                    max={this.props.max}\n                    step={this.props.step_count}\n                    value={this.state.rvalue}\n                    onInput={this.rightInputUpdated}/>\n                <div className='bar' style={{backgroundColor: this.state.bgcolor}}>\n                    <div className='track'/>\n                    <div className='range'\n                        style={rangeStyle}/>\n                    <div className='thumb left'\n                        style={{left: this.state.lvalue + '%'}}/>\n                    <div className='thumb right'\n                        style={{right: (100 - this.state.rvalue) + '%'}}/>\n                    <p className='info left'\n                        style={{left: this.state.lvalue + '%'}}>{this.state.lvalue}</p>\n                    <p className='info right'\n                        style={{right: (100 - this.state.rvalue) + '%'}}>{this.state.rvalue}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CustomSlider;"]},"metadata":{},"sourceType":"module"}